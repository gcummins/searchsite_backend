<?php

// Performics feed processing for dataloader.

function processPerformicsFeed()
{
	// PERFORMICS
	
	logger("In " .__FUNCTION__ . "()", LEVEL_MINUTIA);
	
	global $work, $link, $dbDatabase, $db;

	$varfile='';

	$truncateTableQuery = "TRUNCATE TABLE `$dbDatabase`.`tmpcompare`";
	if(false === mysql_query($truncateTableQuery, $link))
	{
		sqlError($link, __LINE__ , TRUE);
	}

	// This is only true if db_creation has been dropped or deleted.
	$selectQuery = "SELECT * FROM `$dbDatabase`.`db_creation` where `dbset`=3";
	if(false === ($newDbResult=mysql_query($selectQuery, $link)))
	{
		sqlError($link, __LINE__ , TRUE);
	}
	if(mysql_num_rows($newDbResult) == 0)
	{
		$insertQuery = "INSERT INTO `$dbDatabase`.`db_creation` (`dbset`, `numcount`) VALUES (3,0)";
		if(false === mysql_query($insertQuery, $link))
		{
			sqlError($link, __LINE__ , TRUE);
		}
	}

	$selectQuery = "SELECT * FROM `$dbDatabase`.`filesitter` WHERE `feedfile`=3 AND `process`=3";
	if(false === $dataProResult = mysql_query($selectQuery, $link))
	{
		sqlError($link, __LINE__ , TRUE);
	}
	
	// Loop through any relevant entries in filesitter.
	//
	while ($fsQueue = mysql_fetch_array($dataProResult))
	{
		logger("Start Performics processing.  Filesitter process is \"" . getProcessName(4) . "\"");
		$rightNow=time();
		$updateQuery = "UPDATE `$dbDatabase`.`filesitter` SET `process` = 4, `datastart` = $rightNow WHERE `id` = ".$fsQueue['id'];
		if(false === mysql_query($updateQuery, $link))
		{
			sqlError($link, __LINE__ , TRUE);
		}

		// Grab the filename from filesitter.
		//
		$varfile = $fsQueue['file'];

		// ********** Start Process 1
		//
		logger("Loading Performics file: " . $work.$fsQueue['file']);
		// Load delimited file into a master table.
		//
		// Empty master table.
		//
		if(!mysql_query("TRUNCATE TABLE ".$dbDatabase.".al_03_datapro", $link)) sqlError($link, __LINE__ , TRUE);
		if(!mysql_query("LOAD DATA INFILE '".$work.$fsQueue['file']."' INTO TABLE al_03_datapro FIELDS TERMINATED BY '|' IGNORE 1 LINES", $link)) sqlError($link, __LINE__ , TRUE);

		// This is to get the vendor name.
		// programname is what I call the vendor.
		//
		$pgmNameAry = array();
		$pgmNameAry = explode('.',$fsQueue['file']);
		$programname = $pgmNameAry[0];
		unset($pgmNameAry);
		logger("Processing Performics file: " . $work.$fsQueue['file']." for ".$programname);
		// Grab the number of rows in the master table.
		//
		if(!$cntRowsResult=mysql_query("SELECT COUNT(*) AS numRows FROM ".$dbDatabase.".al_03_datapro", $link))
			{ sqlError($link, __LINE__ , true); }
		$num_rows=mysql_fetch_assoc($cntRowsResult);
		 
		logger("Load data from Performics complete.  Filesitter process goes to \"" . getProcessName(5) . "\"", LEVEL_INFORMATION);
		
		$fsProc5 = "UPDATE `$dbDatabase`.`filesitter` SET `process`=5, `dataend`='$rightNow', `datalines`=".$num_rows['numRows']." WHERE `id` = ".$fsQueue['id'];
		if(false === mysql_query($fsProc5, $link))
		{
			sqlError($link, __LINE__ , TRUE);
		}

		// Start Process 2
		//
		// Escape quotes and metachrs from the vendorname.
		// Quotes will gag the following query otherwise.
		//
		$sqlProgName=mysql_real_escape_string($programname, $link);
		$selectQuery = "SELECT * FROM `$dbDatabase`.`compchecker` WHERE `compname`='$sqlProgName' AND `file`=3";
		if(false === ($compCheckResult = mysql_query($selectQuery, $link)))
		{
			sqlError($link, __LINE__ , true);
		}

		$compCheckRow = mysql_fetch_assoc($compCheckResult);

		// Table handling modifications.  A temporary table will always be created here.
		// If the vendor does not exist in compchecker, a production table will be created as well.
		// The temporary tables will be removed by srchtableloader.php when it is run.
		// At that time the data will be transferred to the production table and indexed by
		// the sphinx indexer.

		// Existing vendor table?
		//
		if (trim($programname) == trim($compCheckRow['compname']))
		{
			// There is an existing vendor table.
			// Add a temporary record to tmp_compchecker.
			//
			// Copy existing record from compchecker into tmp_compchecker.
			//
			logger("Retrieving information about $sqlProgName from tmp_compchecker.", LEVEL_INFORMATION);
			$selectQuery = "SELECT `id`, `tablename` FROM `$dbDatabase`.`tmp_compchecker` WHERE `compname` = '$sqlProgName' AND `file`=3";
			if(!$tmpCompCheck = mysql_query($selectQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			if (!mysql_num_rows($tmpCompCheck))
			{
				logger("No records were found in table tmp_compchecker where compname=$sqlProgName and file=3.", LEVEL_INFORMATION);
			}
			else
			{
				$tmpId=mysql_fetch_assoc($tmpCompCheck);
				logger("Dropping table tmp_" . $tmpId['tablename'], LEVEL_DATABASE_OPERATION);
				$dropTableQuery = "DROP TABLE IF EXISTS ".$dbDatabase.".tmp_".$tmpId['tablename'];
				if(false === mysql_query($dropTableQuery))
				{
					sqlError($link, __LINE__ , TRUE);
				}
				
				logger("Deleting " . $tmpId['tablename'] . " entry from tmp_compchecker.", LEVEL_DATABASE_OPERATION);
				$deleteQuery = "DELETE FROM `".$dbDatabase."`.`tmp_compchecker` WHERE tablename='".$tmpId['tablename']."'";
				if(false === mysql_query($deleteQuery, $link))
				{
					sqlError($link, __LINE__ , TRUE);
				}
			}
			
			logger("Copying program information from compchecker to tmp_compchecker", LEVEL_DATABASE_OPERATION);
			$insertQuery = "INSERT INTO `$dbDatabase`.`tmp_compchecker` (`compname`, `vardatetime`, `file`, `norecs`, `tablename`, `companyname`, `approved`, `filename`, `working`, `reload`, `df_lines`, `df_size`, `reindex`) SELECT `compname`, `vardatetime`, `file`, `norecs`, `tablename`, `companyname`, `approved`, `filename`, `working`, `reload`, `df_lines`, `df_size`, `reindex` FROM `$dbDatabase`.`compchecker` WHERE `compname`='$sqlProgName' AND `file`=3";
			if(false === mysql_query($insertQuery, $link))
			{
				sqlError($link, __LINE__ , true);
			}
			
			logger("Updating the program entry in tmp_compchecker with the current time and process information.", LEVEL_DATABASE_OPERATION);
			$rightNow = time();
			$updateQuery = "UPDATE `$dbDatabase`.`tmp_compchecker` SET `vardatetime`='$rightNow', `norecs`=".$num_rows['numRows'].", `filename`='".$fsQueue['file']."', `working`=1, `reload`=0, `reindex`=1 WHERE `id` = ".$compCheckRow['id'];
			if(false === mysql_query($updateQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			logger("Updating the program entry in compchecker with the current time and process information.", LEVEL_DATABASE_OPERATION);
			$updateQuery = "UPDATE `$dbDatabase`.`compchecker` SET `vardatetime`='$rightNow', `norecs`='".$num_rows['numRows']."', `filename`='".$fsQueue['file']."', `working`=1, `reload`=0, `reindex`=1 WHERE `id` = ".$compCheckRow['id'];
			if(false === mysql_query($updateQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			logger("Updating the filesitter table with the new compchecker id.", LEVEL_DATABASE_OPERATION);
			$updateQuery = "UPDATE `$dbDatabase`.`filesitter` SET `compcheckerid` = ".$compCheckRow['id']." WHERE `id` = ".$fsQueue['id'];
			if(false === mysql_query($updateQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			//logger("Updating ".$compCheckRow['compname']." table: ".$compCheckRow['tablename']);
			
			// Create temporary table
			//
			$pfTableName="tmp_".$compCheckRow['tablename'];
			logger("Creating Performics table '$pfTableName.'", LEVEL_DATABASE_OPERATION);
			$tmpTableDef = performics_table($dbDatabase, $pfTableName);
			if(false === mysql_query($tmpTableDef, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			logger("Truncating table '$pfTableName'", LEVEL_DATABASE_OPERATION);
			$truncateTableQuery = "TRUNCATE TABLE `$dbDatabase`.`$pfTableName`";
			if(false === mysql_query($truncateTableQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
		}
		else
		{
			// Vendor table does not exist, so create a new table.
			//
			// Generate new tablename.
			logger("Getting table number count for Performics.", LEVEL_INFORMATION);
			$selectQuery = "SELECT `numcount` FROM `$dbDatabase`.`db_creation` WHERE `dbset`=3";
			if(false === $tblCountResult = mysql_query($selectQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			$tblCount = mysql_fetch_array($tblCountResult);
			
			// Increment the number to create a new table name
			$varcount = $tblCount['numcount'] + 1;
			
			logger("Update the count of existing Performics tables.", LEVEL_DATABASE_OPERATION);
			$updateQuery = "UPDATE `$dbDatabase`.`db_creation` SET `numcount`='$varcount' WHERE `dbset`=3"; 
			if(false === mysql_query($updateQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			// Set the table name
			$vartable = "al_03_".$varcount;
			
			logger("Inserting vendor information into compchecker table.", LEVEL_DATABASE_OPERATION);
			$rightNow = time();
			$insertQuery = "INSERT INTO `$dbDatabase`.`compchecker` (`compname`, `vardatetime`, `file`, `norecs`, `tablename`, `companyname`, `filename`, `working`, `reindex) VALUES ('$sqlProgName', '$rightNow', 3, ".$num_rows['numRows'].", '$vartable', '$sqlProgName', '".$fsQueue['file']."', 1, 1 )";
			if(false === mysql_query($insertQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			logger("Inserting vendor information into tmp_compchecker table.", LEVEL_DATABASE_OPERATION);
			// Get the company ID from the last insert statement
			$new_company_id = mysql_insert_id();
			$insertQuery = "INSERT INTO `$dbDatabase`.`tmp_compchecker` (`compname`, `vardatetime`, `file`, `norecs`, `tablename`, `companyname`, `filename`, `working`, `reindex`) VALUES ('$sqlProgName', '$rightNow', 3, ".$num_rows['numRows'].", '$vartable', '$sqlProgName', '".$fsQueue['file']."', 1, 1 )";
			if(false === mysql_query($insertQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}

			logger("Adding new company to the filesitter table.", LEVEL_DATABASE_OPERATION);
			$updateQuery = "UPDATE ".$dbDatabase.".filesitter SET compcheckerid = ".$new_company_id." WHERE id = ".$fsQueue['id'];
			if(false === mysql_query($updateQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}

			logger("Creating new table: '$vartable'' for vendor '$programname'", LEVEL_DATABASE_OPERATION);
			$pfTmpTableName="tmp_".$vartable;
			
			// Retrieve the table definition
			$pfTmpTableDef = performics_table($dbDatabase, $pfTmpTableName);
			
			logger("Creating table '$pfTmpTableName.'", LEVEL_DATABASE_OPERATION);
			if(!mysql_query($pfTmpTableDef, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			
			logger("Truncating table '$pfTableName.'", LEVEL_DATABASE_OPERATION);
			$truncateTableQuery = "TRUNCATE TABLE `$dbDatabase`.`$pfTmpTableName`";
			if(!mysql_query($truncateTableQuery, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
		}

		// Start Process 3
		//
		// Now move data from master table to temp table.
		logger("Retrieving information about company '$sqlProgName' from tmp_compchecker table.", LEVEL_INFORMATION);
		$selectQuery = "SELECT `id`, `compname`, `tablename` FROM `$dbDatabase`.`tmp_compchecker` WHERE `compname`='$sqlProgName' AND `file`=3";
    	if(false === $compCheckResult = mysql_query($selectQuery, $link))
    	{
    		sqlError($link, __LINE__ , TRUE);
    	}
    	if (!mysql_num_rows($compCheckResult))
    	{
    		shutdown("Failed to find information about company '$sqlProgName' in the tmp_compchecker table.", LEVEL_CRITICAL);
    	}
    	
 		$compCheckRow = mysql_fetch_assoc($compCheckResult);
 		
 		logger("Checking the structure of table 'tmp_" . $compCheckRow['tablename'] . "'", LEVEL_INFORMATION);
 		$describeTableQuery = "DESCRIBE `$dbDatabase`.`tmp_".$compCheckRow['tablename'] . "`";
		if(false === ($descResult=mysql_query($describeTableQuery, $link)))
		{
			sqlError($link, __LINE__ , TRUE);
		}
		$foundIdField = false;
		while($descAry=mysql_fetch_assoc($descResult))
		{
			if(trim($descAry['Field']) == "id")
			{
				logger("Table 'tmp_" . $compCheckRow['tablename'] . "' contains the field 'id'. Dropping that field...", LEVEL_DATABASE_OPERATION);
				$alterTableQuery = "ALTER TABLE ".$dbDatabase.".tmp_".$compCheckRow['tablename']." DROP id";
				if(false === mysql_query($alterTableQuery, $link))
				{
					sqlError($link, __LINE__ , TRUE);
				}
				$foundIdField = true;
			}
		}
		if (false === $foundIdField)
		{
			logger("Table 'tmp_" . $compCheckRow['tablename'] . "' does not contain an index field called 'id' so the table need not be altered.");
		}
		
		$insertQuery = "INSERT INTO `$dbDatabase`.`tmp_".$compCheckRow['tablename']."` SELECT * FROM `$dbDatabase`.`al_03_datapro`";
 		if(false === mysql_query($insertQuery, $link))
 		{
 			sqlError($link, __LINE__ , TRUE);
 		}
 		
 		$alterTableQuery = "ALTER TABLE ".$dbDatabase.".tmp_".$compCheckRow['tablename']." ADD id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY";
 		if(false === mysql_query($alterTableQuery, $link))
 		{
 			sqlError($link, __LINE__ , TRUE);
 		}
 		if(!$tblStatResult = mysql_query("SHOW TABLE STATUS FROM ".$dbDatabase." LIKE 'tmp_".$compCheckRow['tablename']."'", $link)) sqlError($link, __LINE__ , TRUE);
 		$table_search = mysql_fetch_array($tblStatResult);
 		$varlines = $table_search['Rows'];
 		$varsize = $table_search['Data_length'] + $table_search['Index_length'];
		$rightNow = time();
		if(!mysql_query("UPDATE ".$dbDatabase.".tmp_compchecker SET vardatetime = '".$rightNow."', working = 0, df_lines = ".$varlines.", df_size = ".$varsize.", reindex = 1 where id = ".$compCheckRow['id'], $link)) sqlError($link, __LINE__ , TRUE);
		if(!mysql_query("TRUNCATE TABLE ".$dbDatabase.".al_03_datapro", $link)) sqlError($link, __LINE__ , TRUE);
		$rightNow=time();
		logger("Performics processing is almost complete.  Filesitter goes to process \"" . getProcessName(6) . "\"");
		if(!mysql_query("UPDATE `$dbDatabase`.`filesitter` SET `process`=6, `dataend`=$rightNow WHERE `id`=".$fsQueue['id'], $link)) sqlError($link, __LINE__ , TRUE);

		$logfileFromFilesitterQuery="INSERT INTO ".$dbDatabase.".logfile
		(original, file, time, filestart, fileend, datastart, dataend, serial, size, postsize, process, feedfile, storage, datalines, notes, compcheckerid)
		SELECT original, file, time, filestart, fileend, datastart, dataend, serial, size, postsize, process, feedfile, storage, datalines, notes, compcheckerid
		FROM ".$dbDatabase.".filesitter WHERE id = ".$fsQueue['id'];

		//if(!mysql_query($logfileFromFilesitterQuery, $link)) sqlError($link, __LINE__ , TRUE);
		if(!mysql_query($logfileFromFilesitterQuery, $link))
		{
			// This query may have failed because the table does not exist
			// (Possible cause: first install)
			// Lets try to create it.

			$createLogfileTableSQL = "CREATE TABLE IF NOT EXISTS `logfile` (
				`id` bigint(20) NOT NULL auto_increment,
				`original` varchar(50) NOT NULL default '',
				`file` varchar(50) NOT NULL default '',
				`time` int(11) NOT NULL default '0',
				`filestart` int(11) NOT NULL default '0',
				`fileend` int(11) NOT NULL default '0',
				`datastart` int(11) NOT NULL default '0',
				`dataend` int(11) NOT NULL default '0',
				`serial` varchar(32) NOT NULL default '',
				`size` varchar(25) NOT NULL default '',
				`postsize` varchar(25) NOT NULL default '0',
				`process` tinyint(4) NOT NULL default '0',
				`feedfile` int(11) NOT NULL default '0',
				`storage` varchar(50) NOT NULL default '',
				`datalines` bigint(20) NOT NULL default '0',
				`notes` text NOT NULL,
				`compcheckerid` int(11) NOT NULL default '0',
				PRIMARY KEY  (`id`),
				KEY `time` (`time`),
				KEY `process` (`process`)
				) ENGINE=MyISAM DEFAULT CHARSET=latin1";

			logger("Table `logfile` does not exist. Creating...");
			if (!mysql_query($createLogfileTableSQL, $link))
			{
				sqlError($link, __LINE__ , TRUE);
			}
			else
			{
				// Try again to create the log record
				logger("Table `logfile` was created successfully. Trying again to insert a log record.");
				if (!mysql_query($logfileFromFilesitterQuery, $link)) sqlError($link, __LINE__ , TRUE);
			}
		}

		logger("Deleting filesitter entry: ".$fsQueue['id']);
		if(!mysql_query("DELETE FROM ".$dbDatabase.".filesitter WHERE id = ".$fsQueue['id'], $link)) sqlError($link, __LINE__ , TRUE);
	}
	unlink($work.$varfile);
	if(!mysql_query("UPDATE `".$dbDatabase."`.`globalmapping` SET datemod=".time()." where id=3", $link))
	{
		// Perhaps the table does not exist.
		// (Possible cause: first install)
 		// Lets try to create it
		$createGlobalmappingTableSQL = "CREATE TABLE `globalmapping` (
				`id` int(11) NOT NULL auto_increment,
				`filegenerator` varchar(30) NOT NULL default '',
				`nooffields` int(11) NOT NULL default '0',
				`datemod` int(11) NOT NULL default '0',
				PRIMARY KEY  (`id`)
				) ENGINE=MyISAM DEFAULT CHARSET=latin1";

		logger("Table `globalmapping` does not exist. Creating...");
		if (!mysql_query($createGlobalmappingTableSQL, $link))
		{
			sqlError($link, __LINE__ , TRUE);
		}
		else
		{
			logger("Table `globalmapping' was created successfully. Creating initial entries (CJ, LinkShare, Performics)...");

			// Insert the three feed sources into the table
			$insertSourcesSQL = "INSERT INTO `globalmapping` (filegenerator, nooffields) VALUES"
					. "('CJ', 35), "
					. "('LinkShare', 28), "
					. "('Performics', 23);";

			if (!mysql_query($insertSourcesSQL, $link))
			{
				sqlError($link, __LINE__, TRUE);
			}
			else
			{
				logger("Entries were created successfully. Trying again to update the modification date...");
				// Try again to update the record
				if (!mysql_query("UPDATE `".$dbDatabase."`.`globalmapping` SET datemod=".time()." where id=3", $link))
				{
					sqlError($link, __LINE__, TRUE);
				}
				else
				{
					logger("Modification date was updated successfully.");
				}
			}
		}
	}
	logger("Performics processing operation complete.");
}
?>